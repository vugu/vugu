// Code generated by vugu via vugugen DO NOT EDIT.
// Please regenerate instead of editing or add additional code in a separate file.

package main

import "fmt"
import "reflect"
import "github.com/vugu/vjson"
import "github.com/vugu/vugu"
import js "github.com/vugu/vugu/js"
import "log"

func (c *Root) Build(vgin *vugu.BuildIn) (vgout *vugu.BuildOut) {

	vgout = &vugu.BuildOut{}

	var vgiterkey interface{}
	_ = vgiterkey
	var vgn *vugu.VGNode
	vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "testing"}}}
	vgout.Out = append(vgout.Out, vgn)	// root for output
	{
		vgparent := vgn
		_ = vgparent
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t0"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(vugu.HTML("t0text"))
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t1"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML("t1text")
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t2"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML("t2text")
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t3"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(amp)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t4"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(vugu.HTML(amp))
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t5"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(false)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t6"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(10)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t7"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(20.0)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t8"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML((*string)(nil))
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n            "}
		vgparent.AppendChild(vgn)
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(3), Namespace: "", Data: "div", Attr: []vugu.VGAttribute{{Namespace: "", Key: "id", Val: "t9"}}}
		vgparent.AppendChild(vgn)
		vgn.SetInnerHTML(S("blah"))
		vgn = &vugu.VGNode{Type: vugu.VGNodeType(1), Data: "\n        "}
		vgparent.AppendChild(vgn)
	}
	return vgout
}

// 'fix' unused imports
var _ fmt.Stringer
var _ reflect.Type
var _ vjson.RawMessage
var _ js.Value
var _ log.Logger
